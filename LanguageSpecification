overall:

- the language is case-insensitive

output:

- compiling a program produces a recipe card in a text format (html/txt)
- if recipes are included as ingredients, recipe cards for these will be produced for these as well

ingredients:

- must not include , \* ? [] () :
- must be used in at least one with() statement
- may have a specified amount
  - this is annotated by ()
  - an amount consists of a number followed by a measuring unit
    - these are seperated by whitespace
- if no amount is specified, the ingredient will be uncountable
  - uncountable ingredients can never be used up
- ingredients are seperated by other ingredients by a newline
- ingredients can be specified as optional by suffixing them with a ?
  - optional ingredients behave just like other ingredients
  - the only difference is that they are clearly stated as optional on the recipe card
- ingredients can be specified as self contained recipes by suffixing them with a \*
  - if an ingredient is specified as a recipe, a recipe with that title must exist in the users recipe list
  - otherwise, the program will not be able to compile

ingredient arithmetic:

- if ingredients are specified by an amount, the following is true:
  - it is impossible to use more of the ingredient than specified
  - the entire amount must be used during the procedure
  - if no amount is specified in a with() statement, it is the same as implicity writing all

kitchenware:

- must not include , \* ? [] () :
- must be used in at least one using() statement

procedure:

- each step of the procedure is described using a with() statements
- a procedure must end with a done() statement

with():

- takes zero to many input parameters
- all input parameters must be ingredients
- the input parameters may have a specified amount
  - this is written in the form: ingredient (amount)
  - the units must match with what was specified in the ingredient list (e.g. kg to g is legal, g to ml is not)
  - if no unit is specified, it is assumed that the unit is the same as was specified in the ingredient list
  - the specified amount may use the keywords: all, half, quarter, rest
    - these keywords operates on the initially specified amount
- input parameters are seperated by comma
- the body should specify the procedure
- all ingredients included as parameters must be included in the body
  - these are annotated by []
  - these may have an alternative name, following the format [alternative name : actual name]
- may end with a yield statement

using():

- an optional statement serving as an extention of the with() statement
- takes zero to many input parameters
- all input parameters must be kitchenware
- the included parameters does not have to be included in the body of the with() statement
  - however, if they are, they should be annotated by []

yield:

- an optional statement to end a with() statement
- specifies zero to many output parameters
- all specified parameters are considered new ingredients
  - these must be used in a later with() statement or in the done statement
  - the ingredients must not have the same name as already existing ingredients

done:

- the final statement of the program
- specifies zero to many output parameters
  - these must be ingredients previously yielded
  - when using a recipe as an ingredient, these parameters specify what ingredients the recipe yields

tags:

- optional descriptors of the recipe

time:

- prep time should specify how much of the time in the recipe is used for preperation
- cook time should specify how much of the time in the recipe is used for cooking
- total time = prep time + cook time
- if only prep time or cook time is specified, it will appear on the recipe card as total time

encapsulation:

- to differentiate between different parts of the program, the compiler identifies specific keywords
  - title:
  - description:
  - amount:
  - cook time:
  - prep time:
  - total time:
  - tags:
  - ingredients:
  - kitchenware:
  - procedure:
  - yield:
  - done:
  - (all)
  - (half)
  - (quarter)
  - (rest)
- it also recognizes these functions
  - with()
  - using()
- functions must be either on the form
  - with():
    or
  - with() using():
- procedure must be the last part of the program
- once a keyword has been recognized, the compiler reads until it recognizes another keyword
  - the only exception is when it reads done, which makes it produce the recipe card and terminate the program
- depending on the keyword, the compiler will look for different syntax in between the keywords
